plugins {
    id 'java'
    id "io.qameta.allure" version "2.12.0"
}

group = 'org.example'
version = '1.0-SNAPSHOT'
sourceCompatibility = 21
targetCompatibility = 21

repositories {
    mavenCentral()
    gradlePluginPortal()
}

ext {
    versions = [
            allure      : '2.29.1',
            assertj     : '3.27.3',
            retrofit    : '2.11.0',
            junit5      : '5.11.4',
            junit5Agg   : '1.11.4',
            lombok      : '1.18.36',
            commonsCodec: '1.18.0',
            spring      : '3.4.2',
            jackson     : '2.18.2',
            playwright  : '1.50.0'
    ]
}

dependencies {
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$versions.junit5")
    implementation("org.junit.jupiter:junit-jupiter-api:$versions.junit5")
    testImplementation("org.junit.platform:junit-platform-suite:$versions.junit5Agg")

    implementation("io.rest-assured:rest-assured:$versions.restAssured")
    implementation("commons-codec:commons-codec:$versions.commonsCodec")

    implementation("io.qameta.allure:allure-assertj:$versions.allure")
    implementation("io.qameta.allure:allure-junit5:$versions.allure")

    implementation("com.microsoft.playwright:playwright:$versions.playwright")

    implementation("com.squareup.retrofit2:retrofit:$versions.retrofit")
    implementation("com.squareup.retrofit2:converter-jackson:$versions.retrofit")

    implementation("org.springframework.boot:spring-boot-starter:$versions.spring")
    testImplementation("org.springframework.boot:spring-boot-starter-test:$versions.spring")

    implementation("com.fasterxml.jackson.core:jackson-databind:$versions.jackson")

    compileOnly("org.projectlombok:lombok:$versions.lombok")
    annotationProcessor("org.projectlombok:lombok:$versions.lombok")

    testCompileOnly("org.projectlombok:lombok:$versions.lombok")
    testAnnotationProcessor("org.projectlombok:lombok:$versions.lombok")
}

test {

    useJUnitPlatform {

        systemProperty "env", System.getProperty("env")

        if (project.hasProperty("type")) {
            for (String t : new String(project.getProperty("type")).split(",")) {
                includeTags(t)
            }
        }
    }
}